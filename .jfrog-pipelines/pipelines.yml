##### JFrog - Ran Cli Pipeline #####
#valuesFilePath: ./values.yml

resources:

# Application source repository
  - name: ran_cli
    type: GitRepo
    configuration:
      gitProvider: ran_cli
      path: Ransela17/ran-cli             
      branches:
        include: master
      buildOn:
        commit: true

# Bulid info for build image by pipeline
  - name: cli_buildinfo
    type: BuildInfo
    configuration:
      sourceArtifactory: MyArtifactory

#### JFrog Pipeline Steps ####

pipelines:
  - name: ran_cli_pipeline
    steps:
      - name: p1_s1
        type: Bash
        configuration:
          inputResources:
            # Sets up step to be triggered when there are commit events to myFirstRepo
            - name: ran_cli
        execution:
          onExecute:
            # Data from input resources is available as env variables in the step
            - echo $res_ran_cli_commitSha
            # The next two commands add variables to run state, which is available to all downstream steps in this run
            # Run state documentation: https://www.jfrog.com/confluence/display/JFROG/Creating+Stateful+Pipelines#CreatingStatefulPipelines-RunState
            - add_run_variables current_runid=$run_id
            - add_run_variables commitSha=$res_ran_cli_commitSha
            # This variable is written to pipeline state in p1_s3.
            # So this will be empty during first run and will be set to prior run number in subsequent runs
            # Pipeline state documentation: https://www.jfrog.com/confluence/display/JFROG/Creating+Stateful+Pipelines#CreatingStatefulPipelines-PipelineState
            - echo "Previous run ID is $prev_runid"
 
      # Step 1 - Build App Image 
      - name: Build
        type: DockerBuild
        configuration:
          dockerFileLocation: .
          dockerFileName: Dockerfile
          dockerImageName: ${{dockerImageName}}
          dockerImageTag: ${run_number}
          inputResources:
            - name: ran_cli
          integrations:
            - name: MyArtifactory 

      # Step 2 - Push to Artifactory
      - name: DockerPush
        type: DockerPush
        configuration:
          affinityGroup: ran_cli_group
          forceXrayScan: false
          failOnScan: false
          targetRepository: ran-cli
          integrations:
            - name: MyArtifactory                 
          inputSteps:
            - name: Build

        execution:
          onStart:
            - echo "Preparing for work..."
          onSuccess:
            - echo "Job well done!"
          onFailure:
            - echo "uh oh, something went wrong"
          onComplete:
            - echo "Cleaning up some stuff"
      
      # Step 3 - Push to Artifactory
      - name: Publish_app_build
        type: PublishBuildInfo
        configuration:
          affinityGroup: ran_cli_group
          inputSteps:
            - name: DockerPush
          outputResources:
            - name: cli_buildinfo

      # Step 4 - Xray Scan
      - name: Xray
        type: XrayScan
        configuration:
          affinityGroup: ran_cli_group
          inputResources:
            - name: cli_buildinfo
